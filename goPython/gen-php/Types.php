<?php
/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


class Student {
  static $_TSPEC;

  /**
   * @var int
   */
  public $sid = null;
  /**
   * @var string
   */
  public $sname = null;
  /**
   * @var bool
   */
  public $ssex = false;
  /**
   * @var int
   */
  public $sage = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sid',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'sname',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'ssex',
          'type' => TType::BOOL,
          ),
        4 => array(
          'var' => 'sage',
          'type' => TType::I16,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['sid'])) {
        $this->sid = $vals['sid'];
      }
      if (isset($vals['sname'])) {
        $this->sname = $vals['sname'];
      }
      if (isset($vals['ssex'])) {
        $this->ssex = $vals['ssex'];
      }
      if (isset($vals['sage'])) {
        $this->sage = $vals['sage'];
      }
    }
  }

  public function getName() {
    return 'Student';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->sid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sname);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->ssex);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->sage);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Student');
    if ($this->sid !== null) {
      $xfer += $output->writeFieldBegin('sid', TType::I32, 1);
      $xfer += $output->writeI32($this->sid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sname !== null) {
      $xfer += $output->writeFieldBegin('sname', TType::STRING, 2);
      $xfer += $output->writeString($this->sname);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ssex !== null) {
      $xfer += $output->writeFieldBegin('ssex', TType::BOOL, 3);
      $xfer += $output->writeBool($this->ssex);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sage !== null) {
      $xfer += $output->writeFieldBegin('sage', TType::I16, 4);
      $xfer += $output->writeI16($this->sage);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

final class Constant extends \Thrift\Type\TConstant {
  static protected $MAPCONSTANT;

  static protected function init_MAPCONSTANT() {
    return array(
      "hello" => "world",
      "goodnight" => "moon",
    );
  }
}


